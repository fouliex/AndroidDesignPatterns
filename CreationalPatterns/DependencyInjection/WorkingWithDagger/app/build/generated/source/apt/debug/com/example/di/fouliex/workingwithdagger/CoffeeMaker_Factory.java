// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.di.fouliex.workingwithdagger;

import com.example.di.fouliex.workingwithdagger.service.api.Heater;
import dagger.Lazy;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class CoffeeMaker_Factory implements Factory<CoffeeMaker> {
  private final Provider<Heater> heaterProvider;

  private final Provider<Pump> pumpProvider;

  public CoffeeMaker_Factory(Provider<Heater> heaterProvider, Provider<Pump> pumpProvider) {
    assert heaterProvider != null;
    this.heaterProvider = heaterProvider;
    assert pumpProvider != null;
    this.pumpProvider = pumpProvider;
  }

  @Override
  public CoffeeMaker get() {
    return new CoffeeMaker(DoubleCheck.lazy(heaterProvider), pumpProvider.get());
  }

  public static Factory<CoffeeMaker> create(
      Provider<Heater> heaterProvider, Provider<Pump> pumpProvider) {
    return new CoffeeMaker_Factory(heaterProvider, pumpProvider);
  }

  /** Proxies {@link CoffeeMaker#CoffeeMaker(Lazy, Pump)}. */
  public static CoffeeMaker newCoffeeMaker(Lazy<Heater> heater, Pump pump) {
    return new CoffeeMaker(heater, pump);
  }
}
